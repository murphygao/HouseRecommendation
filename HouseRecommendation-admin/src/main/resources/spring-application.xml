<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.1.xsd  
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/task 
    http://www.springframework.org/schema/task/spring-task-4.1.xsd    
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.2.xsd 
    http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"
	default-lazy-init="false">

    <aop:aspectj-autoproxy/>
    
    <context:component-scan base-package="com.glory.admin"/>
    
	<!-- 定时器开关 开始 -->
	<task:annotation-driven />
	<!-- 标注类型 的事务配置 如果使用注解事务。就放开 <tx:annotation-driven /> -->

	<!-- 统一异常处理方式 -->
	<bean id="exceptionHandler" class="com.glory.admin.exception.MyExceptionHandler" />
	<!-- 初始化数据 -->

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<bean id="adminDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${admin.jdbc.driver}" />
		<property name="url" value="${admin.jdbc.url}" />
		<property name="username" value="${admin.jdbc.username}" />
		<property name="password" value="${admin.jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${admin.jdbc.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${admin.jdbc.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${admin.jdbc.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${admin.jdbc.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${admin.jdbc.maxWait}"></property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j" />
	</bean>
	
	
	<bean id="fundhouseDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${fundhouse.jdbc.driver}" />
		<property name="url" value="${fundhouse.jdbc.url}" />
		<property name="username" value="${fundhouse.jdbc.username}" />
		<property name="password" value="${fundhouse.jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${fundhouse.jdbc.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${fundhouse.jdbc.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${fundhouse.jdbc.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${fundhouse.jdbc.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${fundhouse.jdbc.maxWait}"></property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat,log4j" />
	</bean>
	
	
	<bean id="multipleDataSource" class="com.cardniu.fundhouse.util.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="adminDataSource"/>
        <property name="targetDataSources">
            <map>
                <entry key="adminDataSource" value-ref="adminDataSource"/>
                <entry key="fundhouseDataSource" value-ref="fundhouseDataSource"/>
            </map>
        </property>
    </bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource" />
		<property name="mapperLocations" value="classpath*:mapper/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		            reasonable=true
		          </value>
		        </property>
		      </bean>
		    </array>
	   </property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cardniu.fundhouse.mapper,com.cardniu.fundhouse.business.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />

	 <!-- 对数据源进行事务管理 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="multipleDataSource"/>
        
        
    <context:property-placeholder location="classpath:config.properties"/>
    <util:properties id="settings" location="classpath:config.properties"/>

	<bean id="jedisTemplate" class="com.cardniu.fundhouse.redis.JedisTemplate">
		<constructor-arg index="0" ref="sentinelJedisPool" />
	</bean>

	<!-- Jedis连接池 -->
    <bean id="sentinelJedisPool" class="redis.clients.jedis.JedisSentinelPool">
        <constructor-arg index="0" value="#{settings['redis.sentinel.master.name']}" />
        <constructor-arg index="1" value="#{settings['redis.sentinels'].split(',')}" />
        <constructor-arg index="2" ref="jedisPoolConfig" />
        <constructor-arg index="3" value="#{settings['redis.timeout']}" type="int" />
        <constructor-arg index="4" value="#{settings['redis.password']}" />
        <constructor-arg index="5" value="#{settings['redis.database']}" type="int" />
    </bean>

	<!-- Jedis连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="100" />
		<property name="maxIdle" value="5" />
		<property name="minIdle" value="2" />
		<property name="maxWaitMillis" value="2000" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
	</bean>
</beans>
